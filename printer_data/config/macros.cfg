#  __  __                          
# |  \/  |                         
# | \  / | __ _  ___ _ __ ___  ___ 
# | |\/| |/ _` |/ __| '__/ _ \/ __|
# | |  | | (_| | (__| | | (_) \__ \
# |_|  |_|\__,_|\___|_|  \___/|___/
#
# Macros Configurations - Flsun Super Racer
# Version 3.0
#
# Guislain Cyril
 
#[include filament.cfg]
[include mmu_form_tip.cfg]
[include mmu_macro_vars.cfg]

##################################################
# Start and End G-Codes
##################################################
    
[gcode_macro START_PRINT]
description: Start G-Code
variable_filament_type: "none"
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("none")|string %}
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_type VALUE='"{FILAMENT_TYPE}"'
  G21
  G90
  M82
  {% if printer.extruder.target != 0 %}
  M104 S{EXTRUDER_TEMP}
  {% else %}
  M104 S150
  {% endif %}
  M140 S{BED_TEMP}
  G28
  FILAMENTS_SETTINGS
  G1 Z270 F2500
  G1 X-130 F2500
  M190 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
  G1 Z1 F2500
  G1 X-130 Y0 Z0.4
  G92 E0
  #Extrude about 40 mm by printing a 90 degree arc
  #G3 X0 Y-130 I130 J1 Z0.3 E40 F2700
  G3 X0 Y-130 I130 Z0.3 E40 F2700
  #Retract and move nozzle up
  G92 E0
  G1 E-1.5 F1800
  G0 Z0.5
  G1 E0 F300

[gcode_macro END_PRINT]
#variable_is_complete: 0
description: End G-Code
gcode:
  M106 S0
  M104 S0
  M140 S0
  G92 E0  #set position
  G91     #relative position
  G1 E-1 F300
  G1 Z+5 F6000
  G28
  G90
  M84
  UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
  #SET_GCODE_VARIABLE MACRO=END_PRINT VARIABLE=is_complete VALUE=1
  #TIMELAPSE_RENDER
  

##################################################
# Pause / Resume / Cancel Print
##################################################


[gcode_macro PAUSE]
description: Pause the current print
rename_existing: PAUSE_BASE
gcode:
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(-122) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(0) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  RESPOND MSG="Pausing printing..."
  PAUSE_BASE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x} Y{y} F2500


[gcode_macro RESUME]
description: Resume the current print
rename_existing: RESUME_BASE
gcode:
  ##### set defaults #####
  {% set e = params.E|default(1) %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
  {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {% else %}
  {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  G91
  {% if printer["gcode_macro M600"].m600_enabled == 1 %}
  RESPOND MSG="Nozzle heating..."
  M109 S{printer["gcode_macro M600"].hotend_temp}
  M106 S{printer["gcode_macro M600"].fan_speed}
  RESPOND MSG="Loading filament..."
  G0 E{printer["gcode_macro _MMU_CLIENT_VARS"].load_fast_length} F{printer["gcode_macro _MMU_CLIENT_VARS"].load_speed_fast}
  G0 E{printer["gcode_macro _MMU_CLIENT_VARS"].load_slow_length} F{printer["gcode_macro _MMU_CLIENT_VARS"].load_speed_slow}
  M400
  RESPOND MSG="Purging filament..."

 # {% set volume = printer["gcode_macro M600"].flush_volume|float %}
   # {% if volume > 0 %}
    #  _DYNAMIC_PURGE VOLUME={volume}
    #{% else %}
    #  PURGE_FILAMENT
    #{% endif %}
    
  PURGE_FILAMENT
  M400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=0
  {% else %}
  G1 E{e} F2100
  {% endif %}
  RESPOND MSG="Resuming printing..."
  SET_IDLE_TIMEOUT TIMEOUT=1800
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the current print
rename_existing: CANCEL_PRINT_BASE
gcode:
  RESPOND MSG="Printing canceled!"
  G28
  M106 S0
  M104 S0
  M140 S0
  CANCEL_PRINT_BASE


##################################################
# Filament / Color Change
##################################################
  
[gcode_macro M600]
description: Filament change
variable_hotend_temp: 0
variable_m600_enabled: 0
variable_fan_speed: 0
gcode:
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(-122) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(10) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=M600_state
  SET_IDLE_TIMEOUT TIMEOUT=86400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=1
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=hotend_temp VALUE={printer.extruder.target}
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=fan_speed VALUE={printer.fan.speed}

  PAUSE
  G91
  #G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  
  # Sagomatura punta prima dello scaricamento
  _MMU_FORM_TIP
  
  RESPOND MSG="Unloading filament..."
  G91
  {% set remaining_unload = printer["gcode_macro _MMU_CLIENT_VARS"].unload_length - printer["gcode_macro _MMU_FORM_TIP_VARS"].cooling_tube_position - printer["gcode_macro _MMU_FORM_TIP_VARS"].cooling_tube_length %}
  G0 E-{remaining_unload} F{printer["gcode_macro _MMU_CLIENT_VARS"].unloading_speed}
  M400
  RESPOND MSG="Nozzle heating stopped!"
  M104 S0
  M106 S0
  RESTORE_GCODE_STATE NAME=M600_state


##################################################
# Load / Unload Filament
##################################################

[gcode_macro UNLOAD_FILAMENT]
description: Filament unloading
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SAVE_GCODE_STATE NAME=unload_state
  {% if printer.extruder.temperature < 220 %}
  RESPOND MSG="Nozzle heating..."
  M109 S200
  {% endif %}
  
  # Sagomatura punta prima dello scaricamento
  _MMU_FORM_TIP
  
  RESPOND MSG="Unloading filament..."
  G91
  {% set remaining_unload = printer["gcode_macro _MMU_FORM_TIP_VARS"].unload_length - printer["gcode_macro _MMU_FORM_TIP_VARS"].cooling_tube_position - printer["gcode_macro _MMU_FORM_TIP_VARS"].cooling_tube_length %}
  G0 E-{remaining_unload} F{printer["gcode_macro _MMU_CLIENT_VARS"].unloading_speed}
  # Il filamento è già posizionato correttamente dalla sagomatura
  # Completa lo scaricamento
  #{% set vars = printer['gcode_macro _MMU_CLIENT_VARS'] %}
  #{% set tip_retraction = vars.cooling_tube_position + vars.cooling_tube_length %}
  #{% set remaining_unload = vars.unload_length - tip_retraction %}
  #G0 E-{remaining_unload} F1500
  M400
  RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Filament loading
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SAVE_GCODE_STATE NAME=load_state
  {% if printer.extruder.temperature < 200 %}
  RESPOND MSG="Nozzle heating..."
  M109 S200
  {% endif %}
  RESPOND MSG="Loading filament..."
  G91
  G0 E{printer["gcode_macro _MMU_CLIENT_VARS"].load_fast_length} F{printer["gcode_macro _MMU_CLIENT_VARS"].load_speed_fast}
  G0 E{printer["gcode_macro _MMU_CLIENT_VARS"].load_slow_length} F{printer["gcode_macro _MMU_CLIENT_VARS"].load_speed_slow}
  M400
  RESTORE_GCODE_STATE NAME=load_state
  {% endif %}

##################################################
# Calibrations
##################################################

[gcode_macro Z_OFFSET_CALIBRATION]
description: Measure Z-Offset
gcode:
  RESPOND type="command" msg="action:prompt_end"
  SET_GCODE_OFFSET Z=0
  G28
  G1 X0 Y0 Z50 F2500
  M400
  PROBE_CALIBRATE
  SAVE_VARIABLE VARIABLE=calibration_state VALUE=1
  RESPOND MSG="Z_OFFSET SAVED"


[gcode_macro ENDSTOPS_CALIBRATION]
description: Endstops Phase Calibration
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  G91
  G0 Z-70 F1500
  G28
  G91
  G0 Z-70 F1500
  G28
  G91
  G0 Z-70 F1500
  G28
  G91
  G0 Z-70 F1500
  G28
  G91
  G0 Z-70 F1500
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_a
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_b
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_c
  M400
  G28
  SAVE_VARIABLE VARIABLE=calibration_state VALUE=2
  {% endif %}


[gcode_macro DELTA_CALIBRATION]
description: Delta Calibration
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SET_GCODE_OFFSET Z=0
  BED_MESH_CLEAR
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  DELTA_CALIBRATE
  M400
  G1 X0 Y0 Z50 F2500
  G28
  SAVE_VARIABLE VARIABLE=calibration_state VALUE=3
  {% endif %}


[gcode_macro BED_LEVELING]
description: Bed Leveling
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SET_GCODE_OFFSET Z=0
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  G1 X0 Y0 Z50 F2500
  BED_MESH_CALIBRATE
  M400
  G1 X0 Y0 Z50 F2500
  G28
  SAVE_VARIABLE VARIABLE=calibration_state VALUE=4
  {% endif %}


[gcode_macro PRESSURE_ADVANCE]
description: Pressure Advance
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SET_PRESSURE_ADVANCE ADVANCE=0   
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
  TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020
  {% endif %}


##################################################
# Nozzle / Bed PID Calibration
##################################################

[gcode_macro PID_BED]
description: Pid Bed
#rename_existing: PID_BED_BASE
gcode:
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  RESPOND MSG="Bed PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106
  {% set TARGET_TEMP = params.TARGET_TEMP|default(80)|float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  #PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(75)|float}
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"
  G28
  {% endif %}
  

[gcode_macro PID_HOTEND2]
#rename_existing: BASE_PID_HOTEND
description: Hotend PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  RESPOND MSG="Hotend PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106
  {% set TARGET_TEMP = params.TARGET_TEMP|default(220)|float %}
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  #PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(220)}
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"
  G28
  {% endif %}
  
  
[gcode_macro _PID_KS_START]
description: PID for KlipperScreen
gcode:
  RESPOND MSG="PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106


[gcode_macro _PID_KS_END]
description: PID for KlipperScreen
gcode:
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"
  G28


##################################################
# Verifications and Measurements with ADXL
##################################################

[gcode_macro ADXL_TEST]
description: ADXL Test
gcode:
  ACCELEROMETER_QUERY


[gcode_macro ADXL_NOISE]
description: Measure Accelerometer Noise
gcode:
  MEASURE_AXES_NOISE


[gcode_macro ADXL_AXE_X]
description: Measure X axis resonances
gcode:
  G28
  M400
  SHAPER_CALIBRATE AXIS=X


[gcode_macro ADXL_AXE_Y]
description: Measure Y axis resonances
gcode:
  G28
  M400
  SHAPER_CALIBRATE AXIS=Y


##################################################
# Save Configuration
##################################################

[gcode_macro SAVE]
description: Save Configuration
gcode:
  SAVE_CONFIG


##################################################
# Managing Slicer Controls
##################################################

[gcode_macro M204]
description: Sets maximum accelleration
rename_existing: M204.1
gcode:
  {% if 'S' in params %}
  {% set s = params.S|float %}
  SET_VELOCITY_LIMIT ACCEL={s}
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t}
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p}
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t}
  {% endif %}
  {% endif %}


[gcode_macro M205]
description: Sets square corner velocity
gcode:
  {% if 'X' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}
  

##################################################
# Managing Temperatures Controls
##################################################

[gcode_macro M109]
description: Managing extruder temperature
rename_existing: M99109
gcode:
  {% set s = params.S|float %}
  M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if s != 0 %}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
  {% endif %}


[gcode_macro M190]
description: Managing bed temperature
rename_existing: M99190
gcode:
  {% set s = params.S|float %}
  M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if s != 0 %}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
  {% endif %}


##################################################
# Loading default bed mesh at startup
##################################################

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
  BED_MESH_PROFILE LOAD=default


##################################################
# Z-Offset Management
##################################################

[gcode_macro SECURITY_OFFSET]
description: Apply a 1mm Safety Offset
gcode:
  SET_GCODE_OFFSET Z=+1
  RESPOND MSG="Safety Offset applied!"


[gcode_macro SET_GCODE_OFFSET]
description: Saving Z-Offset
rename_existing: _SET_GCODE_OFFSET
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
  {% set offsets = printer.save_variables.variables.gcode_offsets %}
  {% else %}
  {% set offsets = {'z': None} %}
  {% endif %}
  {% set ns = namespace(offsets={'z': offsets.z}) %}
  _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
  {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
  {%if 'Z_ADJUST' in params %}
  {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
  {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"


[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
  {% set offsets = printer.save_variables.variables.gcode_offsets %}
  _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
  { action_respond_info("Loaded Z-Offset from variables.cfg file: %s" % (offsets)) }
  {% endif %}


[gcode_macro SHOW_Z_CALIBRATION]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Processo di calibrazione automatica avviato"
    RESPOND TYPE=command MSG="action:prompt_text  Inserisci la sonda e conferma l'avvenuto inserimento."
    RESPOND TYPE=command MSG="action:prompt_footer_button Annulla|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Conferma|Z_OFFSET_CALIBRATION|warning"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro SHOW_DELTA_CALIBRATION]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Processo di calibrazione automatica avviato"
    RESPOND TYPE=command MSG="action:prompt_text  Inserisci la sonda e conferma l'avvenuto inserimento."
    RESPOND TYPE=command MSG="action:prompt_footer_button Annulla|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Conferma|DELTA_CALIBRATION|warning"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro SHOW_BED_LEVELING]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Processo di calibrazione automatica avviato"
    RESPOND TYPE=command MSG="action:prompt_text  Inserisci la sonda e conferma l'avvenuto inserimento."
    RESPOND TYPE=command MSG="action:prompt_footer_button Annulla|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Conferma|BED_LEVELING|warning"
    RESPOND TYPE=command MSG="action:prompt_show"

#[gcode_macro SHOW_Z_ADJUST]
#gcode:
    #{% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    #RESPOND TYPE=error MSG="This macro cannot be used while printing!"
    #{% else %}
    #G28
    #G1 Z0 F1500
    #RESPOND TYPE=command MSG="action:prompt_begin Z_Offset Adjust"
    #RESPOND TYPE=command MSG="action:prompt_button_group_start"
    #RESPOND TYPE=command MSG="action:prompt_button +0.005|SET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=1|info"
    #RESPOND TYPE=command MSG="action:prompt_button +0.01|SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1|info"
    #RESPOND TYPE=command MSG="action:prompt_button +0.025|SET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=1|info"
    #RESPOND TYPE=command MSG="action:prompt_button +0.05|SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1|info"
    #RESPOND TYPE=command MSG="action:prompt_button_group_end"
    #RESPOND TYPE=command MSG="action:prompt_button_group_start"
    #RESPOND TYPE=command MSG="action:prompt_button -0.005|SET_GCODE_OFFSET Z_ADJUST=-0.005 MOVE=1|info"
    #RESPOND TYPE=command MSG="action:prompt_button -0.01|SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1|info"
    #RESPOND TYPE=command MSG="action:prompt_button -0.025|SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1|info"
    #RESPOND TYPE=command MSG="action:prompt_button -0.05|SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1|info"
    #RESPOND TYPE=command MSG="action:prompt_button_group_end"
    #RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end"
    #RESPOND TYPE=command MSG="action:prompt_show"
    #{% endif %}


[gcode_macro SHOW_Z_ADJUST]
gcode:
    {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
    {% else %}
    G28
    G1 Z200 F2000
    G1 Z100 F1500
    {% if printer.save_variables.variables.calibration_state != 10 %}
      SET_GCODE_OFFSET Z_ADJUST=+0.2 MOVE=1
      RESPOND TYPE=error MSG="FIRST TIME!"
    {% endif %}
    G4 P1000
    SAFE_ON
    G1 Z0 F1000
    RESPOND TYPE=command MSG="action:prompt_begin Z_Offset Adjust"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button +0.005|SET_GCODE_OFFSET Z_ADJUST=+0.005 MOVE=1|info"
    RESPOND TYPE=command MSG="action:prompt_button +0.01|SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1|info"
    RESPOND TYPE=command MSG="action:prompt_button +0.025|SET_GCODE_OFFSET Z_ADJUST=+0.025 MOVE=1|info"
    RESPOND TYPE=command MSG="action:prompt_button +0.05|SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1|info"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button -0.005|SET_GCODE_OFFSET Z_ADJUST=-0.005 MOVE=1|info"
    RESPOND TYPE=command MSG="action:prompt_button -0.01|SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1|info"
    RESPOND TYPE=command MSG="action:prompt_button -0.025|SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1|info"
    RESPOND TYPE=command MSG="action:prompt_button -0.05|SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1|info"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|Z_ADJ "
    RESPOND TYPE=command MSG="action:prompt_show"
    SAVE_VARIABLE VARIABLE=calibration_state VALUE=10
    {% endif %}

[gcode_macro Z_ADJ]
gcode:
    G4 P1000
    SAFE_OFF
    RESPOND TYPE=command MSG=action:prompt_end
    G28


#####################################################################
#  Caselight
#####################################################################
  
[gcode_macro LIGHT_OFF]
gcode:
    {action_call_remote_method(
        "set_device_power", device="Caselight", state="off"
    )}
    
[gcode_macro LIGHT_ON]
gcode:
    {action_call_remote_method(
        "set_device_power", device="Caselight", state="on"
    )}
   
[gcode_macro CASELIGHT]
gcode:
    {action_call_remote_method(
        "set_device_power", device="Caselight", state="toggle"     
    )}

#####################################################################
#  Power
#####################################################################

[gcode_macro POWER_OFF_PRINTER]
gcode:
    #M109 S60  #wait for hotend temperature
    {action_call_remote_method(
        "set_device_power", device="Printer", state="off"
    )}


[gcode_macro POWER_AUTO]
variable_is_active: 1
gcode:
    {% set is_active = printer.save_variables.variables.active|int %}
    {% if is_active == 1%}
      SET_GCODE_VARIABLE MACRO=POWER_AUTO VARIABLE=is_active VALUE={0}
      RESPOND TYPE=error MSG="auto_power_off is DEACTIVE"
      SAVE_VARIABLE VARIABLE=active VALUE=0
      UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
    {% elif is_active == 0%}
      SET_GCODE_VARIABLE MACRO=POWER_AUTO VARIABLE=is_active VALUE={1}
      RESPOND TYPE=error MSG="auto_power_off is ACTIVE"
      SAVE_VARIABLE VARIABLE=active VALUE=1
      UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
    {% endif %}
    #SAVE_VARIABLE VARIABLE=active VALUE=is_active
#RESPOND MSG={printer["gcode_macro END_PRINT"].is_complete}
#RESPOND MSG={printer.save_variables.variables.active}


[delayed_gcode POWER_OFF_PRINTER_CHECK]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 60  %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            POWER_OFF_PRINTER
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro ACTIVATE_POWER_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60

[gcode_macro DEACTIVATE_POWER_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=0

[delayed_gcode POWER_OFF_PRINTER_CHECK_ACT]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
  {% else %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
  {% endif %}



#####################################################################
#  Mooves
#####################################################################

[gcode_macro SAFE_ON]
gcode:
  {% set CONFIG_A = printer.configfile.settings['tmc2209 stepper_a'].run_current|float %}
  {% set CONFIG_B = printer.configfile.settings['tmc2209 stepper_b'].run_current|float %}
  {% set CONFIG_C = printer.configfile.settings['tmc2209 stepper_c'].run_current|float %}
  {% set SAFE = 0.14 %}
  #SET_TMC_CURRENT STEPPER=stepper_a CURRENT={SAFE} HOLDCURRENT={SAFE/2}
  SET_TMC_CURRENT STEPPER=stepper_a CURRENT={SAFE} 
  SET_TMC_CURRENT STEPPER=stepper_b CURRENT={SAFE} 
  SET_TMC_CURRENT STEPPER=stepper_c CURRENT={SAFE} 
  
[gcode_macro SAFE_OFF]
gcode:
  {% set CONFIG_A = printer.configfile.settings['tmc2209 stepper_a'].run_current|float %}
  {% set CONFIG_B = printer.configfile.settings['tmc2209 stepper_b'].run_current|float %}
  {% set CONFIG_C = printer.configfile.settings['tmc2209 stepper_c'].run_current|float %}
  SET_TMC_CURRENT STEPPER=stepper_a CURRENT={CONFIG_A} 
  SET_TMC_CURRENT STEPPER=stepper_b CURRENT={CONFIG_B} 
  SET_TMC_CURRENT STEPPER=stepper_c CURRENT={CONFIG_C} 
    

[gcode_macro Super_racer] 
description: lower acceration / velocity max to print cartesian optimised filaent. eg low melt pla /silk 'like blends' prone to bad overhangs / tearing infill with delta jerk /acc values. 
gcode: 
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=10
  SET_VELOCITY_LIMIT ACCEL=3700
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=1850
  SET_VELOCITY_LIMIT VELOCITY=200

[gcode_macro Super_racer_performance]
description: lower acceration / velocity max to print cartesian optimised filaent. eg low melt pla /silk 'like blends' prone to bad overhangs / tearing infill with delta jerk /acc values. 
gcode: 
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=35.0   #45
  SET_VELOCITY_LIMIT ACCEL=6300
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=3150
  SET_VELOCITY_LIMIT VELOCITY=400


#####################################################################
#  Customs
#####################################################################
[gcode_macro Retraction_Test]
description: auto tune retraction test.
gcode: 
  TUNING_TOWER COMMAND=SET_RETRACTION PARAMETER=RETRACT_LENGTH START=4 FACTOR=0.05

[gcode_macro FILAMENTS_SETTINGS]
description: Set material-specific settings including retraction
gcode:
    {% set FILAMENT_TYPE = printer["gcode_macro START_PRINT"].filament_type|string %}
    
    # Impostazioni per PLA
    {% if FILAMENT_TYPE == "PLA" %}
        SET_RETRACTION RETRACT_LENGTH=2.2 RETRACT_SPEED=35 UNRETRACT_EXTRA_LENGTH=00.1 UNRETRACT_SPEED=35
        # Aggiungi qui altre impostazioni PLA (pressure advance, etc.)
        # SET_PRESSURE_ADVANCE ADVANCE=0.04
        {action_respond_info("Settings applied for PLA - Retraction: 1.5mm @ 35mm/s")}
    
    # Impostazioni per PETG (tutti i tipi di PETG)
    {% elif FILAMENT_TYPE == "PETG" %}
        SET_RETRACTION RETRACT_LENGTH=2.5 RETRACT_SPEED=35 UNRETRACT_EXTRA_LENGTH=0.02 UNRETRACT_SPEED=40
        # Aggiungi qui altre impostazioni PETG
        # SET_PRESSURE_ADVANCE ADVANCE=0.08
    
    # Impostazioni per ABS
    {% elif FILAMENT_TYPE == "ABS" %}
        SET_RETRACTION RETRACT_LENGTH=7.5 RETRACT_SPEED=45 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=45
        # Aggiungi qui altre impostazioni ABS
        # SET_PRESSURE_ADVANCE ADVANCE=0.06
        #{action_respond_info("Settings applied for ABS - Retraction: 7.5mm @ 45mm/s")}
    
    # Impostazioni per TPU
    {% elif FILAMENT_TYPE == "TPU" %}
        SET_RETRACTION RETRACT_LENGTH=0.4 RETRACT_SPEED=25 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=20
        # Aggiungi qui altre impostazioni TPU
        # SET_PRESSURE_ADVANCE ADVANCE=0.12
    
    # Default per materiali non riconosciuti o "none"
    {% else %}
        SET_RETRACTION RETRACT_LENGTH=2 RETRACT_SPEED=35 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=35
        {% if FILAMENT_TYPE == "none" %}
            {action_respond_info("No filament type specified, using default PLA settings")}
        {% else %}
            {action_respond_info("Unknown material '%s', using PLA retraction settings" % FILAMENT_TYPE)}
        {% endif %}
    {% endif %}


[gcode_macro USE_PROBE]
description: "Verifichiamo lo stato del probe"
gcode:
    # richiama la macro dinamica che aggiorna probe_state
    CHECK_PROBE
    # legge e mostra il risultato
    M117 Stato probe: {printer['gcode_macro CHECK_PROBE'].probe_state}

